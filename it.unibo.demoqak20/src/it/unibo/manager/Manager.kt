/* Generated by AN DISI Unibo */ 
package it.unibo.manager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Manager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var counter = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						forward("config", "config(ledgui)" ,"led" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("manager starts $counter ")
						 counter++  
						delay(100) 
						forward("turnOn", "turnOn(0)" ,"led" ) 
						delay(500) 
						forward("turnOff", "turnOff(0)" ,"led" ) 
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="end", cond=doswitchGuarded({ counter == 3  
					}) )
					transition( edgeName="goto",targetState="work", cond=doswitchGuarded({! ( counter == 3  
					) }) )
				}	 
				state("end") { //this:State
					action { //it:State
						println("manager BYE")
					}
				}	 
			}
		}
}
