/* Generated by AN DISI Unibo */ 
package it.unibo.worker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Worker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var StartWorktime     = 0L
			var ElapsedWorktime   = 0L
			var ResidualWorktime  = 0L
			var TurnWorkktime     = 3000L //14400000L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="startTheWork", cond=doswitch() )
				}	 
				state("startTheWork") { //this:State
					action { //it:State
						StartWorktime = getCurrentTime()
						println("================= Working in the morning (for m1) ============= ")
						stateTimer = TimerActor("timer_startTheWork", 
							scope, context!!, "local_tout_worker_startTheWork", TurnWorkktime )
					}
					 transition(edgeName="t00",targetState="changeTurn",cond=whenTimeout("local_tout_worker_startTheWork"))   
					transition(edgeName="t01",targetState="workshiftMorning",cond=whenDispatch("m1"))
				}	 
				state("workshiftMorning") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						ElapsedWorktime = getDuration(StartWorktime)
						 ResidualWorktime = TurnWorkktime - ElapsedWorktime  
						println("time residual in the morning: $ResidualWorktime")
						stateTimer = TimerActor("timer_workshiftMorning", 
							scope, context!!, "local_tout_worker_workshiftMorning", ResidualWorktime )
					}
					 transition(edgeName="t02",targetState="changeTurn",cond=whenTimeout("local_tout_worker_workshiftMorning"))   
					transition(edgeName="t03",targetState="workshiftMorning",cond=whenDispatch("m1"))
				}	 
				state("changeTurn") { //this:State
					action { //it:State
						println("================= Working in the afternoon (for m2) ============= ")
						StartWorktime = getCurrentTime()
						stateTimer = TimerActor("timer_changeTurn", 
							scope, context!!, "local_tout_worker_changeTurn", TurnWorkktime )
					}
					 transition(edgeName="t04",targetState="sleeping",cond=whenTimeout("local_tout_worker_changeTurn"))   
					transition(edgeName="t05",targetState="workshiftAfternoon",cond=whenDispatch("m2"))
				}	 
				state("workshiftAfternoon") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						ElapsedWorktime = getDuration(StartWorktime)
						 ResidualWorktime = TurnWorkktime - ElapsedWorktime  
						println("time residual in the afternoon: $ResidualWorktime")
						stateTimer = TimerActor("timer_workshiftAfternoon", 
							scope, context!!, "local_tout_worker_workshiftAfternoon", ResidualWorktime )
					}
					 transition(edgeName="t06",targetState="sleeping",cond=whenTimeout("local_tout_worker_workshiftAfternoon"))   
					transition(edgeName="t07",targetState="workshiftAfternoon",cond=whenDispatch("m2"))
				}	 
				state("sleeping") { //this:State
					action { //it:State
						println("================= Sleeping ============= ")
						stateTimer = TimerActor("timer_sleeping", 
							scope, context!!, "local_tout_worker_sleeping", TurnWorkktime )
					}
					 transition(edgeName="t08",targetState="startTheWork",cond=whenTimeout("local_tout_worker_sleeping"))   
				}	 
			}
		}
}
