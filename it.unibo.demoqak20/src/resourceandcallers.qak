System -msglog  resourceandcallers
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 
 
//mqttBroker "broker.hivemq.com" : 1883   
 
//Dispatch userCmd    : userCmd(X)
Event    alarm      : alarm(V)

Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)

Request info        : info(X)
Reply   replytoinfo : replytoinfo(X)
     
Context ctxresourceandco  ip [ host= "localhost" port= 8048 ]  

QActor resourceandco context ctxresourceandco { 
[#  
	fun resourceInfo() : String {
 		return "$name | state=${currentState.stateName}  msg=$currentMsg"
 	}
#]
	State s0 initial { 
		 updateResource [# resourceInfo() #]
		 println("resource waiting ...") 	  	 
	}
	Transition t0  
//		whenMsg userCmd -> handleUserCmd
		whenRequest cmd -> handleRequestCmd
		whenEvent   alarm -> handleAlarm
		//whenRequest cmd -> handleRequestCmdWithAsk
	
	State handleAlarm{
		printCurrentMessage
		updateResource [# resourceInfo() #]
 	}
	Transition t0  
 		whenRequest cmd -> handleRequestCmd
		whenEvent   alarm -> handleAlarm
	
	
	State handleRequestCmd{
		printCurrentMessage
		updateResource [# resourceInfo() #]
		onMsg( cmd : cmd(X) ){
			[# val ANSW = "answerFor_${payloadArg(0)}" #]
			replyTo cmd with replytocmd : replytocmd( $ANSW ) 
		}		 		
	}
	Goto s0	
	 
 }

QActor callerco1 context ctxresourceandco {
	State s0 initial {    
  		 println("caller1 request cmd ")
		 request resourceandco -m cmd : cmd(callerco1) 
	}
	Transition t0 
		whenReply replytocmd -> handleReply 
		whenEvent alarm      -> handleAlarm
	
 	
	State handleReply{
		printCurrentMessage
		delay 5000
		println("       --- caller1 handleReply: emit fire") 
 		emit alarm : alarm(fire)	 
 	}
	Transition t0  
 		whenEvent   alarm -> handleAlarm

	State handleAlarm{
		println("       --- caller1 handleAlarm   ") 
		printCurrentMessage
//		emit alarm : alarm(fire)	//possible LOOP!!
 	}
 	Transition t0 
		whenReply replytocmd -> handleReply 
 		whenEvent   alarm -> handleAlarm
 
}


QActor callerco2 context ctxresourceandco {
	State s0 initial {    
  		 println("caller2 request cmd ")
		 request resourceandco -m cmd : cmd(callerco2) 
	}
	Transition t0 
		whenReply replytocmd -> handleReply 
		
	
	State handleReply{
		printCurrentMessage
		println("       --- caller2 handleReply: emit tsunami ") 
		emit alarm : alarm(tsunami)
 	}
	Transition t0 
 		whenEvent   alarm -> handleAlarm

	State handleAlarm{
		println("       --- caller2 handleAlarm   ") 
		printCurrentMessage
//		emit alarm : alarm(tsunami)  //possible LOOP!!
 	}
 	Transition t0 
		whenReply replytocmd -> handleReply 
 		whenEvent alarm      -> handleAlarm
}