/*
 * This model gives essential and relevant information about
 * 	     STRUCTURE, INTERACTION and BEHAVIOR
 * about the system
 * 
 * The model is EXECUTABLE
 */

System blsledonly    
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 

mqttBroker "broker.hivemq.com" :  1883 eventTopic "unibo/blsledonly/events"
 
Dispatch ledCmd : ledCmd(X)       
   
Context ctxblsledonly    ip [host="localhost" port=8075] 		 
  
/* 
 * Just an actuator device ...
 */ 
QActor led context ctxblsledonly {  
[# 
	var counter = 0 
	val leddev = resources.bls.kotlin.led.create()	
#]    
	State s0 initial {  
		//run resources.it.unibo.bls.devices.gui.LedAsGui.create( )
 		println("led started")
 		[# leddev.turnOff() #]
	} 
	Goto waitCmd   
	
	State waitCmd{  println("led waits ...") 
	}   
	Transition t0     
 		whenMsg ledCmd            -> handleLedCmd
  	  
	State  handleLedCmd{  
		printCurrentMessage   
		
		onMsg ( ledCmd : ledCmd(X) ) { 
			[# val Cmd = payloadArg(0)
			   counter++
			#]
			if[# Cmd == "on" #] {  
 				println( "led ON counter=$counter" )
 				[# leddev.turnOn() #]
 				updateResource [# "ledOn" #]
			}else{
				println( "led OFF counter=$counter" )
				[# leddev.turnOff() #]
				updateResource [# "ledOff" #]
			}
		}
	}	
	Goto waitCmd        
}

 
 