System  -msglog caller1
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 

mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/resource/events"
  
Dispatch userCmd    : userCmd(X)
Event    alarm      : alarm(V)
 
Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)
Request info        : info(X)
Reply   replytoinfo : replytoinfo(X)
  
Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)

/*
 * WARNING: 
 * if an external resource works in a MQTT-enabled QakContext,
 * then also a request-caller must work via MQTT
 */
Context ctxres1   	ip [ host= "localhost"   port= 8048 ]  
Context ctxcaller1  ip [ host= "127.0.0.1"   port= 8043 ]  
  
ExternalQActor resource context ctxres1  
    
QActor caller1 context ctxcaller1 {
	State s0 initial {    
  		 println("caller1 request cmd ")
		 request resource -m cmd : cmd(caller1) 
	}
	Transition t0 
		whenReply replytocmd -> handleReply 
		whenEvent alarm      -> handleAlarm
	
 	
	State handleReply{
		printCurrentMessage
		delay 5000
		println("       --- caller1 handleReply: emit fire") 
 		emit alarm : alarm(fire)	 
 	}
	Transition t0  
 		whenEvent   alarm -> handleAlarm

	State handleAlarm{
		println("       --- caller1 handleAlarm   ") 
		printCurrentMessage
//		emit alarm : alarm(fire)	//possible LOOP!!
 	}
 	Transition t0 
		whenReply replytocmd -> handleReply 
 		whenEvent   alarm -> handleAlarm
 
}

 


