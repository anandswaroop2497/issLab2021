System  -msglog  caller2
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 

mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/resource/events"
  
Dispatch userCmd    : userCmd(X)
Event    alarm      : alarm(V) 
 
Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)
Request info        : info(X)
Reply   replytoinfo : replytoinfo(X)
  
Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)

/*
 * WARNING: 
 * if an external resource works in a MQTT-enabled QakContext,
 * then also a request-caller must work via MQTT
 */
Context ctxres2      ip [ host= "localhost"   port= 8048 ]  
Context ctxcaller2   ip [ host= "127.0.0.1"   port= 8045 ]  
  
ExternalQActor resource context ctxres2 
    
QActor caller2 context ctxcaller2 {
	State s0 initial {    
  		 println("caller2 request cmd ")
		 request resource -m cmd : cmd(caller2) 
	}
	Transition t0 
		whenReply replytocmd -> handleReply 
		
	
	State handleReply{
		printCurrentMessage
		println("       --- caller2 handleReply: emit tsunami ") 
		emit alarm : alarm(tsunami)
 	}
	Transition t0 
 		whenEvent   alarm -> handleAlarm

	State handleAlarm{
		println("       --- caller2 handleAlarm   ") 
		printCurrentMessage
//		emit alarm : alarm(tsunami)  //possible LOOP!!
 	}
 	Transition t0 
		whenReply replytocmd -> handleReply 
 		whenEvent alarm      -> handleAlarm
}

 


