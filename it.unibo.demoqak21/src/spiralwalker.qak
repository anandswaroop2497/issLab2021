System spiralwalker
/*
 * TODO: complete this code for the case of path failure
 */
Dispatch pathDone : pathDone(X)

Context ctxspiralwalker  ip [host="localhost" port=8038]    

QActor spiralwalker context ctxspiralwalker{     
[#  var stepCounter        = 0
	var CurrentPlannedMove = ""
	val mapname            = "roomMap"
	val maxNumSteps        = 3	  
	val MYSELF             = myself
	
#]	  
	State s0 initial {	     
		println("&&&  plantester STARTED")
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP") 
 		run itunibo.planner.plannerUtil.showMap() 
		run itunibo.planner.plannerUtil.startTimer()  
 	} 
	Goto  exploreStep  
	
	State exploreStep{
		[# stepCounter = stepCounter + 1 #]
		//run itunibo.planner.plannerUtil.planForGoal("$stepCounter","$stepCounter")
		run kotlinCode.pathExec.doJob("$stepCounter", MYSELF)
 	} 
 	Goto waitForAnswer

 	  
 	State waitForAnswer{
 		println("waitForAnswer ... ") 
 	}
 	Transition t0 whenMsg pathDone -> backToHome
  	
	State backToHome{
		println("backToHome ... ")
		
		//run itunibo.planner.plannerUtil.planForGoal("0","0")
		run kotlinCode.pathExec.doJob("0", MYSELF)
	} 
	Goto  waitForBackToHome
	
 	State waitForBackToHome{
 		println("waitForBackToHome ... ") 
 	}
 	Transition t0 whenMsg pathDone -> continueJob
 	
	State continueJob{
		println("MAP AFTER BACK TO HOME $stepCounter")
		run itunibo.planner.plannerUtil.showMap()		
		run itunibo.planner.plannerUtil.saveRoomMap(mapname)		
	}
 	Goto exploreStep if[# stepCounter < maxNumSteps #] else endOfJob 
  	
	State endOfJob{
		run itunibo.planner.plannerUtil.getDuration()
	}
 	
}    