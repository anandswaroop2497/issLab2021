in anaconda 
lsvirtualenv -l
sphinks-quickstart  //TUTTO ATTACCATO

.. _test di Turing : https://it.wikipedia.org/wiki/Test_di_Turing

:remark:`
.. epigraph:: 

.. _tcpsupprt:

.. list-table:: 
  :widths: 50,50
  :width: 100%

  * - a1
    - a2
  * - b1
    - b2

``  ``

:doc:`RadarGuiCoap`

.. _My target:

`My target`_.

:ref:`SonarModel<SonarModel>`

===
---
+++
%%%
&&&


 Il delay qualificato cone **'HORRIBLE EFFECT'**  potrebbe ripercuotersi sui client 
in modo inaccettabile e mettere in crisi un sistema. Si veda ad esempio

.. _HorribleEffetcts:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Sperimentazione di effetti indesiderati
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Gli effetti dei ritardi indotti dagli observer POJO possono essere sperimentati invocando, ad esempio,
``SonarUsageMainWithContextTcp`` dopo avere tolto il commento sul delay nel metodo update di
 `SonarObserverFortesting`_.


==================================================
Il concetto di contesto
==================================================

.. include:: ContextServer.rst 

==================================================
Da TCP a CoAP
==================================================

.. include:: DaTcpACoAP.rst 


==================================================
WebSockets
==================================================

.. include:: WebSockets.rst 



==================================
Distribuzione del RadarSystem
==================================  

.. include:: RadarSystemDeploy.rst  

Il metodo ``elaborate`` con argomento :ref:`ApplMessage<ApplMessage>` viene presentato subito qui,
ma verrà introdotto solo più avanti
(si veda :ref:`IApplMsgHandler<IApplMsgHandlerEsteso>` in :doc:`ContestiContenitori`) quando avremo la necessità di 
introdurre nei messaggi anche informazioni relative al nome del mittente e del destinatario.



===========================   ===========================    =========================== 
     Server                              id                        entry
---------------------------   ---------------------------   ---------------------------
:ref:`TcpContextServer`               nome host                 port
:ref:`MqttContextServer`              id del client              nome topic     
:ref:`CoapContextServer`                    -                      -
===========================   ===========================    ===========================   



 
.. Test funzionale
.. Si veda :doc:`ContextServer`.

La distribuzione del *RadarSystem* assume due forme:

- la forma di una libreria di nome ``it.unibo.enablerCleanArch-1.0.jar`` prodotta dal progetto it.unibo.enablerCleanArch_
- la forma di una applicazione web (che utiliza la libreria precedente) prodotta dal progetto ``it.unibo.msenabler``


.. _enablerCleanArch:

++++++++++++++++++++++++++++++++++++
it.unibo.enablerCleanArch
++++++++++++++++++++++++++++++++++++

Il progetto *it.unibo.enablerCleanArch* è sviluppato in ``Java8`` e fornisce il programma
``AllMainRadarLed`` che permette di selezionare ed eseguire diverse configurazioni applicative.

.. code:: 

  1    LedUsageMain 
  a    RadarSystemDevicesOnRaspMqtt
  A    RadarSystemMainOnPcMqtt
  2    SonarUsageMainWithEnablerTcp
  3    SonarUsageMainWithContextTcp 
  4    SonarUsageMainWithContextMqtt
  5    SonarUsageMainCoap
  6    RadarSystemAllOnPc
  7    RadarSystemDevicesOnRasp
  8    RadaSystemMainCoap
  9    RadarSystemMainOnPcCoap

Selezionando **a** si esegue la parte di applicazione che attiva i dispositivi Led e Sonar sul Raspberry.
A queta parte corrisponde la parte di applicazione  **A**, da eseguire sul PC per inviare comandi ai dispositivi remoti 
e per ricevere informazioni sul loro stato.
Le due parti interagiscono via MQTT usando il broker di indirizzo ``tcp://broker.hivemq.com``.

 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Caso 8 uso di Coap - sistema tutto su Raspberry
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Il sistema su Raspberry attiva un unico server (**CoapApplServer**) e aggiunge come risorse 
il Led ( devices/output/lights/led ) e il Sonar (devices/input/sonar). 

.. code:: 

   "simulation"       : "false",
   "ControllerRemote" : "false",
   "LedRemote"        : "false",
   "SonareRemote"     : "false",
   "RadarGuiRemote"   : "false",
   "protocolType"     : "coap",
   "withContext"      : "false",
   "sonarDelay"       : "200",
   ........................................
   "pcHostAddr"       : "192.168.1.9",
   "raspHostAddr"     : "192.168.1.24",
   "radarGuiPort"     : "8014",
   "ledPort"          : "8010",
   "ledGui"           : "true",
   "sonarPort"        : "8012",
   "sonarObservable"  : "false",
   "controllerPort"   : "8016",
   "serverTimeOut"    : "600000",
   "applStartdelay"   : "3000",
   "sonarDistanceMax" : "150",
   "DLIMIT"           : "12",
   "ctxServerPort"    : "8018",
   "mqttBrokerAddr"   : "tcp://broker.hivemq.com",
   "testing"          : "false"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Caso 8 uso di Coap - dispositivi su Raspberry 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Condifguriamo il sistema su Raspberry specificando che il controller è remoto.

.. code:: 

   "simulation"       : "false",
   "ControllerRemote" : "true",
   ...


A questo punto attiviamo il programma 9 su PC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Caso 9 uso di Coap - Controller su PC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Questo programma nasce per usare CoAP e quindi fissa in modo diretto i parametri di configurazione 
che gli interessano:

.. code:: 

   	RadarSystemConfig.raspHostAddr = "192.168.1.xxx";
		RadarSystemConfig.DLIMIT       = 12;
		RadarSystemConfig.simulation   = false;
		RadarSystemConfig.withContext  = false;
		RadarSystemConfig.sonarDelay   = 200;     //come quello del Raspberry

Il programma può operare anche definendo il Controller come un observer della risorsa Sonar,
ponendo 

.. code:: 

   useProxyClient = false

In caso contrario, il Controller opera con un convenzionale ciclo **read-eval-print**.

