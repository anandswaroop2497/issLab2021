/* 
 * ================================================================================
 * basicrobot.qak
 * VERSION June 8, 2021
 * The basicrobot emits the event  obstacle : obstacle(ID)
 * The envsonarhandler  emits the event polar : polar( D,A )
 *  		(without giving this responsibility to the basicrobot)
 * 
 * You can command the robot by using 
 * 		resources\consolepython\basicrobotconsole.py
 * or 	resources\consolegui\consoleGuiCoap.kt (look at sysConnKb.kt)
 * 
 * External MQTT sites:
 * 	"mqtt.eclipse.org:  mosquitto.org mqtt.fluux.io  broker.hivemq.com
 * ================================================================================
 */ 
  
System  -trace  basicrobot    
//mqttBroker "localhost" : 1883 eventTopic "unibo/basicrobot"   		

Dispatch cmd       	: cmd(MOVE)     
Dispatch end       	: end(ARG)  
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
  
Dispatch obstacle  : obstacle( ARG ) 	//generated by distancefilter
Event  endall	   : endall( ARG )   
Event   info       : info( ARG ) 	    //for external components, not coap-observed

Event  polar     	: polar(DISTANCE,ARG)   		//emitted for the radar
Event  local_sonar	: sonar(DISTANCE,NAME)			//emitted by the virtual robot support
Event  sonar     	: sonar(DISTANCE,NAME)			//emitted by distancefilter
 
Context ctxbasicrobot ip [host="localhost" port=8020]  

CodedQActor datacleaner    context ctxbasicrobot className "rx.dataCleaner"
CodedQActor distancefilter context ctxbasicrobot className "rx.distanceFilter"
 
QActor basicrobot context ctxbasicrobot{
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
#]  
 	State s0 initial { 	  
 		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
        if[# RobotType != "virtual" #]{
		// 	delay 1000  //give to the realsonar the time to start
	 		println("basicrobot | type=$RobotType attempts to activate the sonar pipe")	
	 		[#  //For real robots
	 			var robotsonar = context!!.hasActor("realsonar")  
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH SONARS") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"realsonar" ) 				
	 				//SET THE PIPE  
	 				robotsonar.
	 				subscribeLocalActor("datacleaner").
	 				subscribeLocalActor("distancefilter").
	 				subscribeLocalActor("basicrobot")		//in order to perceive obstacle
	 			}else{
	 				println("basicrobot | WARNING: realsonar NOT FOUND")
	 			}
	 		#]  
 		}//if
 		else{ 
 			[#  var robotsonar = context!!.hasActor("robotsonar") 
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH VIRTUAL SONAR") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"robotsonar" ) 				
	 				//SET THE PIPE  
	 				robotsonar.
	 				subscribeLocalActor("datacleaner").
	 				subscribeLocalActor("distancefilter").
	 				subscribeLocalActor("basicrobot")		//in order to perceive obstacle
	 			}else{
	 				println("basicrobot | WARNING: realsonar NOT FOUND")
	 			}

 			#]
 		}
  		run unibo.robot.robotSupport.move( "l" )
		run unibo.robot.robotSupport.move( "r" )
 		updateResource [# "stopped" #]
 		discardMsg Off  //WE want receive any msg
 	}
	Goto work
	
	State work{ 
		println("basicrobot  | waiting .................. ")  
	} 
	Transition t1   whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep			
					whenMsg    obstacle   -> handleObstacle  //in virtualrobot caused by the move w/s
					whenEvent sonar       -> handleSonar
				  	whenMsg     end       -> endwork			  
	
	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
  			//activate the motors 
			run unibo.robot.robotSupport.move( payloadArg(0 ) )
			updateResource [# "movedone(${payloadArg(0)})" #]
		}
	 }
	 Goto work  
	 
	State handleObstacle{
		//printCurrentMessage
		println("basicrobot | handleObstacle")	
		run unibo.robot.robotSupport.move( "h" )
		//back to avoid emission of obstacle again if moving forward !!!
		/* 
		run unibo.robot.robotSupport.move( "s" )
		delay 400
		run unibo.robot.robotSupport.move( "h" )
		*/
		//onMsg( obstacle  : obstacle( TARGET ) ){
			updateResource [# "obstacle" #]
 		//}
 		emit info : info( obstacledoing(w) )
	}
	Goto work 

	State handleSonar{
		printCurrentMessage
	}
	Goto work
		
   	State doStep{ 
 		//printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
			//println("basicrobot | doStep StepTime =$StepTime ")
 			run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever
 			memoCurrentTime StartTime  
		}  
	}  
	Transition t0 
		whenTimeVar StepTime  -> stepPerhapsDone	//caused by p
		whenMsg  obstacle     -> stepFail		 
  	 
  	/* StepTime expires but also an obstacle is found */
 	State stepPerhapsDone{ 
 		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		println("basicrobottttttttttttttttttttttttttttttt | $StepTime  ")  
		//printCurrentMessage
 		/* 
		onMsg( local_sonar : sonar(D,T)){ //for the real robot
			println("basicrobottxxxxxxxxxxxxxxxx | after a step emit polar(${payloadArg(0)}, 180) ")
			emit polar : polar( $payloadArg(0), 90 )		//perceived via mqtt			
 		}*/
  	}
 	Transition t0 whenTimeVar StepTime    -> stepDone  //StepTime is the first checked
 				  whenMsg obstacle      -> stepFailDetected
	
	State stepDone{   
 		//run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done
		println("basicrobot | stepDone")
		updateResource [# "stepDone($StepTime)" #]
   		emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
  	}
	Goto work  
	
	State stepFailDetected{
		println("basicrobot | stepFailDetecteddddddddddddddddddddddddddddddddddd near end of step ")
 		replyTo step with stepfail : stepfail($StepTime, obstacle)
 		updateResource [# "stepFail($Duration)" #]
    }
	Goto work 
	 
	State stepFail{  
		setDuration Duration from StartTime
		println("basicrobot | stepFail duration=$Duration")
 		updateResource [# "stepFail($Duration)" #]
 		emit info : info( stepFail($Duration) )
		//println("basicrobot | stepFail after $Duration ")
		//emit info : info( obstacledoing(step) )
		//emit polar    : polar( 10, 90 )		 
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work 
	
	State endwork{ 
		onMsg( end : end( V ) ){ 
			println("basicrobot | endwork")
			updateResource [# "move(end)" #]	 		
			//run utils.virtualRobotSupportQak.terminatevr( )
		}
 		emit endall : endall(normal) 
 		terminate 1
	}  
	   
}
/*
QActor envsonarhandler context ctxbasicrobot{
 	State s0 initial { 	 
 		println("envsonarhandler | START")	 		
	}	
	Transition t1   whenEvent local_sonar -> handleEnvSonar
	
	State handleEnvSonar{
		onMsg( local_sonar : sonar(D,T)){ 
			println("envsonarhandler | emit polar(${payloadArg(0)}, 180) ")
			emit polar    : polar( $payloadArg(0), 180 )		//perceived via mqtt
		}
	}
	Goto s0  
	
}
*/
/* 
 * 
//Just to test that the event is emitted ...
QActor perceiver context ctxbasicrobot{
 	State s0 initial { 	 
 		println("perceiver | START")	 		
	}	
	Transition t1   whenEvent polar-> handlePolar
 
  State handlePolar{
  	printCurrentMessage
  }
  Goto s0
}
* */