/*
 * demoplannertf21.qak
  */  
System   demoplannertf21

  
Dispatch moveok   : move( MOVESHORT )
Dispatch pathfail : pathdone( P )
//Dispatch movefail : move( MOVESHORT )
Dispatch mapDone  : mapDone( FNAME )
  
Event alarm     : alarm(X)
//Event sonar     : distance(X)

Context ctxDemoplannertf21   ip [host="localhost" port=8052]
      
/* 
 * ------------------------------------------------------------------
 *   
 * ------------------------------------------------------------------
*/     
QActor trolley context ctxDemoplannertf21{         
[#
//val mapname     = "roomBoundary"  		 
//var NumStep     = 0
var Myself      = myself   
var CurrentPlannedMove = "" 
#] 
	State s0 initial {	 
     	run itunibo.planner.plannerUtil.initAI()
		println("&&&  trolley loads the parking map from the given file ...") 
		run itunibo.planner.plannerUtil.loadRoomMap("parkingMap") 
		run itunibo.planner.plannerUtil.showMap( )   
     	run itunibo.planner.plannerUtil.showCurrentRobotState()
     	
     	run pathexecutil.register( Myself ) 
   	}
   	Goto moveToIndoor  

  	State moveToIndoor{  		
  		 run itunibo.planner.plannerUtil.planForGoal("6","0")
   	} 
    Goto execPlannedMoves     
    
	State execPlannedMoves{   
		delay 500
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		println("+++++++++++++++++++++++++++++++ $CurrentPlannedMove")
 	}
 	Goto doMove if [# CurrentPlannedMove.length>0 #] else end
 
 	State doMove{ 		
 	}
 	Goto wMove if [# CurrentPlannedMove == "w" #] else turnMove
 	
 	State wMove {     
 		qrun pathexecutil.doMove(myself, "p" )  
 	}
 	Transition t0 whenMsg moveok   -> stepDone   
 	//Goto execPlannedMoves  if [# CurrentPlannedMove.length > 0 #] else end
 	
 	 State stepDone{  
 	 	printCurrentMessage
 		updateResource [# itunibo.planner.plannerUtil.getMap() #]
 		run itunibo.planner.plannerUtil.updateMap(  "w" )
 		run itunibo.planner.plannerUtil.showCurrentRobotState( )
 		//updateResource [# "stepDone" # ]
 		//run itunibo.planner.plannerUtil.showMap( )   
  	} 
 	Goto execPlannedMoves
 	
 	State turnMove{
  		if [# CurrentPlannedMove == "l" || CurrentPlannedMove == "r"  #]{
  			qrun pathexecutil.doMove(myself, "$CurrentPlannedMove")
  		} 
 	}   
  	Transition t0  whenMsg moveok   -> rotationDone


 	State rotationDone{
 		run itunibo.planner.plannerUtil.updateMap(  "$CurrentPlannedMove" )
   		run itunibo.planner.plannerUtil.showCurrentRobotState( )
 	} 
 	 Goto execPlannedMoves
 	
 	State end{
 		printCurrentMessage
 		run itunibo.planner.plannerUtil.showCurrentRobotState( )  
 	}
     
}	
     

    
     

