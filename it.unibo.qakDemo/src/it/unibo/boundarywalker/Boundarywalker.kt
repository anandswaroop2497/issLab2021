/* Generated by AN DISI Unibo */ 
package it.unibo.boundarywalker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Boundarywalker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		val mapname     = "roomBoundary"  		 
		var NumStep     = 0
		 
		//REAL ROBOT
		//var StepTime   = 600	 
		    
		//VIRTUAL ROBOT
		 var StepTime   = 360L	  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  boundarywalker ACTIVE ...")
						 kotlinCode.pathexecutil.register(myself)  
					}
					 transition(edgeName="t016",targetState="work",cond=whenDispatch("start"))
				}	 
				state("work") { //this:State
					action { //it:State
						 NumStep = 0    
						itunibo.planner.plannerUtil.initAI(  )
					}
					 transition( edgeName="goto",targetState="detectBoundary", cond=doswitch() )
				}	 
				state("detectBoundary") { //this:State
					action { //it:State
						 NumStep++  
						println("boundarywalker detectBoundary $NumStep")
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						updateResourceRep( "detectBoundary step=$NumStep"  
						)
					}
					 transition( edgeName="goto",targetState="doAheadMove", cond=doswitchGuarded({ (NumStep<5)  
					}) )
					transition( edgeName="goto",targetState="boundaryFound", cond=doswitchGuarded({! ( (NumStep<5)  
					) }) )
				}	 
				state("doAheadMove") { //this:State
					action { //it:State
						 kotlinCode.pathexecutil.doMove("p",myself)  
					}
					 transition(edgeName="t017",targetState="stepDone",cond=whenDispatch("moveok"))
					transition(edgeName="t018",targetState="stepFailed",cond=whenDispatch("pathfail"))
				}	 
				state("stepDone") { //this:State
					action { //it:State
						updateResourceRep( itunibo.planner.plannerUtil.getMap()  
						)
						itunibo.planner.plannerUtil.updateMap( "w"  )
					}
					 transition( edgeName="goto",targetState="doAheadMove", cond=doswitch() )
				}	 
				state("stepFailed") { //this:State
					action { //it:State
						println("boundarywalker | FOUND A WALL")
						if(  ! itunibo.planner.plannerUtil.atHome()  
						 ){itunibo.planner.plannerUtil.wallFound(  )
						updateResourceRep( "found a wall"  
						)
						 kotlinCode.pathexecutil.doMove("l",myself)  
						itunibo.planner.plannerUtil.updateMap( "l"  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						}
						else
						 { kotlinCode.pathexecutil.doMove("l",myself)  
						 itunibo.planner.plannerUtil.updateMap( "l"  )
						 }
					}
					 transition(edgeName="t019",targetState="detectBoundary",cond=whenDispatch("moveok"))
				}	 
				state("boundaryFound") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.saveRoomMap( mapname  )
						println("robotmapper | FINAL MAP")
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						updateResourceRep(  itunibo.planner.plannerUtil.getMap()  
						)
						 println(itunibo.planner.plannerUtil.showMap())  
						forward("mapDone", "mapDone(mapname)" ,"testexec" ) 
					}
				}	 
			}
		}
}
