/* Generated by AN DISI Unibo */ 
package it.unibo.parkarea

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkarea ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		val mapname     = "parkingMap"  		 
		var Myself      = myself   
		var CurrentPlannedMove = "" 
		var numparkslot = 1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
						println("&&&  trolley loads the parking map from the given file ...")
						itunibo.planner.plannerUtil.loadRoomMap( "$mapname"  )
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						pathexecutil.register( Myself  )
					}
					 transition( edgeName="goto",targetState="setParkingArea", cond=doswitch() )
				}	 
				state("setParkingArea") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.planForGoal( "1", "1"  )
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitch() )
				}	 
				state("execPlannedMoves") { //this:State
					action { //it:State
						delay(300) 
						  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove()  
						println("+++++++++++++++++++++++++++++++ $CurrentPlannedMove")
					}
					 transition( edgeName="goto",targetState="doMove", cond=doswitchGuarded({ CurrentPlannedMove.length>0  
					}) )
					transition( edgeName="goto",targetState="nextparkslot", cond=doswitchGuarded({! ( CurrentPlannedMove.length>0  
					) }) )
				}	 
				state("doMove") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="wMove", cond=doswitchGuarded({ CurrentPlannedMove == "w"  
					}) )
					transition( edgeName="goto",targetState="turnMove", cond=doswitchGuarded({! ( CurrentPlannedMove == "w"  
					) }) )
				}	 
				state("wMove") { //this:State
					action { //it:State
						pathexecutil.doMove(myself ,"p" )
					}
					 transition(edgeName="t00",targetState="stepDone",cond=whenDispatch("moveok"))
				}	 
				state("stepDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						itunibo.planner.plannerUtil.updateMap( "w"  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitch() )
				}	 
				state("turnMove") { //this:State
					action { //it:State
						if(  CurrentPlannedMove == "l" || CurrentPlannedMove == "r"   
						 ){pathexecutil.doMove(myself ,"$CurrentPlannedMove" )
						}
					}
					 transition(edgeName="t01",targetState="rotationDone",cond=whenDispatch("moveok"))
				}	 
				state("rotationDone") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.updateMap( "$CurrentPlannedMove"  )
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitch() )
				}	 
				state("nextparkslot") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						itunibo.planner.plannerUtil.updateMapObstacleOnCurrentDirection(  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						if(  numparkslot < 3  
						 ){ numparkslot = numparkslot + 1  
						itunibo.planner.plannerUtil.planForGoal( "$numparkslot", "$numparkslot"  )
						}
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ numparkslot < 3  
					}) )
					transition( edgeName="goto",targetState="end", cond=doswitchGuarded({! ( numparkslot < 3  
					) }) )
				}	 
				state("end") { //this:State
					action { //it:State
						println("END ...")
					}
				}	 
			}
		}
}
