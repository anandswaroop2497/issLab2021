/* Generated by AN DISI Unibo */ 
package it.unibo.testexec

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Testexec ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 val PathTodo = "{\"path\":\"wwlw\" , \"owner\":\"testexec\"}"  
						println("testexec starts")
						forward("dopath", "dopath($PathTodo)" ,"pathexec" ) 
						delay(1000) 
						emit("alarm", "alarm(fire)" ) 
					}
					 transition(edgeName="t09",targetState="handlePathDone",cond=whenDispatch("pathdone"))
					transition(edgeName="t010",targetState="handlePathFail",cond=whenDispatch("pathfail"))
				}	 
				state("handlePathDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
				state("handlePathFail") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}
