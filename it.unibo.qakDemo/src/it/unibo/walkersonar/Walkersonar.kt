/* Generated by AN DISI Unibo */ 
package it.unibo.walkersonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Walkersonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 kotlinCode.pathexecutil.register(myself)  
						 kotlinCode.pathexecutil.createSonarObserver(scope)  
					}
					 transition( edgeName="goto",targetState="doWork", cond=doswitch() )
				}	 
				state("doWork") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="handleSonar",cond=whenEvent("sonar"))
				}	 
				state("handleSonar") { //this:State
					action { //it:State
						println("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")
						println("$name in ${currentState.stateName} | $currentMsg")
						println("----------------------------------------------------------------")
						emit("alarm", "alarm(sonar)" ) 
					}
					 transition( edgeName="goto",targetState="doWork", cond=doswitch() )
				}	 
			}
		}
}
