/*
 * pathexecutor.qak
 * This MODEL defines the interaction and the behaviour of an ActorFsm component
 * that has the responsibility to execute a given path and to handle alarm events.
 * 
 * The components uses the kotlinCode.pathexecutil that provides the following operations
 *  - memoCurPath :
 *  - nextMove : 
 *  - doMove :  send a command to move the robot by using CallRestWithApacheHTTP
 *              and send to the caller a dispatch (moveok|movefail) related to the answer
 *  -
 */
System -msglog pathexecutor  

Dispatch start    : start( ARG )
Dispatch dopath   : dopath( PATH, OWNER )
Dispatch pathdone : pathdone( P )
Dispatch pathfail : pathdone( P )
Dispatch moveok   : move( MOVESHORT )
Dispatch movefail : move( MOVESHORT )
Dispatch mapDone  : mapDone( FNAME )

 

Event alarm     : alarm(X)

Context ctxPathexecutor  ip [host="localhost" port=8032]

QActor pathexec context ctxPathexecutor{
	//[# var MYSELF = myself #]
	State s0 initial{  	
		println("pathexec starts") 
 		[# kotlinCode.pathexecutil.register(myself) #]
	}	
	Transition t0 whenMsg dopath -> dojob
	
	State dojob{
		printCurrentMessage
 		run kotlinCode.pathexecutil.memoCurPath( "$currentMsg" )
	}
	Goto nextMove   
	
	State nextMove{ 
		[# kotlinCode.pathexecutil.doNextMove(myself) #]		
	} 
	Transition t0 whenEvent alarm  ->  handleAlarm  //first
				  whenMsg pathdone ->  pathcompleted 
				  whenMsg pathfail ->  pathfailure		  
				  whenMsg moveok   ->  nextMove  
				   
	  
	State handleAlarm{ 
		printCurrentMessage
		[# val Pathtodo = kotlinCode.pathexecutil.getCurrentPath() #]
		println(" AAAA | Pathtodo= $Pathtodo ...")
	}
	Transition t0 whenEvent alarm  ->  handleAlarm  //first 
				  whenMsg pathdone ->  pathcompleted 	//manage pending messages
				  whenMsg moveok   ->  nextMove  
				  whenMsg movefail ->  pathfailure 
		
	State pathfailure{
		printCurrentMessage		
		[# val Pathtodo = kotlinCode.pathexecutil.getCurrentPath().replace("p","w") #]
		println("pathexec | END FAIL ")    
		forward spiralwalker -m  pathfail : pathfail( $Pathtodo )
	}	  
	Transition t0 whenMsg dopath -> dojob //DO ANOTHER PATH
	 
	State pathcompleted{ 
		[# val Pathtodo = kotlinCode.pathexecutil.getCurrentPath().replace("p","w") #]
		println("pathexec | END  Pathtodo= $Pathtodo ") 
		forward spiralwalker -m pathdone : pathdone(ok)  //better to use request-response
	} 
	Transition t0 whenMsg dopath -> dojob //DO ANOTHER PATH
}   

/*
 * spiralwalker
 * TODO: complete this code for the case of path failure
*/
 
QActor spiralwalker context ctxPathexecutor{     
[#  var stepCounter        = 1 
	var CurrentPlannedMove = "" 
	val mapname            = "roomMap"
	val maxNumSteps        = 5	  
	//val MYSELF             = myself	     
#]	    
	State s0 initial {	 
		println("&&&  spiralwalker ACTIVE ...")    
 	} 
	Transition t0 whenMsg start -> work
	
	State work{
		println("&&&  spiralwalker STARTED")
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP") 
 		run itunibo.planner.plannerUtil.showMap() 
		run itunibo.planner.plannerUtil.startTimer()  		
	}
	Goto  exploreStep  
	
	State exploreStep{
		[# val PathTodo = kotlinCode.walkerutil.doPlan("${stepCounter++}","${stepCounter}" ) #]
		forward pathexec -m dopath : dopath(  $PathTodo   ) 
 	} 
 	Transition t0 whenMsg pathdone -> backToHomeok
 	    		  whenMsg pathfail -> backToHomeKO
	
	State backToHomeok{
		println("backToHomeok ... ")
		run kotlinCode.walkerutil.updateMapOk()
		[# val PathTodo = kotlinCode.walkerutil.doPlan("0","0") #]
		forward pathexec -m dopath : dopath(  $PathTodo   ) 		
	} 
 	Transition t0 whenMsg pathdone -> continueJob
 	 
 	 
 	State backToHomeKO{
		println("backToHomeKO ... ")	
		run kotlinCode.walkerutil.updateMapKO(mapname) 	
 		[# val PathTodo = kotlinCode.walkerutil.doPlan("0","0") #]
		forward pathexec -m dopath : dopath(  $PathTodo   ) 		
 	}
 	Transition t0 whenMsg pathdone -> continueJob
 	 
	State continueJob{ 
		println("MAP AFTER BACK TO HOME nextstep=$stepCounter")
		run kotlinCode.walkerutil.updateMapOk(mapname) 
		//[# kotlinCode.pathexecutil.waitUser("another step $stepCounter") #]	
	} 
 	Goto exploreStep if[# stepCounter < maxNumSteps #] else endOfJob 
  	
	State endOfJob{
		run itunibo.planner.plannerUtil.getDuration() 
		forward testexec -m mapDone : mapDone( mapname )
	}
 	
}//spiralwalker
     
/*
 * ------------------------------------------------------------------
 *  boundarywalker
 * ------------------------------------------------------------------
*/     
QActor boundarywalker context ctxPathexecutor{         
[#
val mapname     = "roomBoundary"  		 
var NumStep     = 0
 
//REAL ROBOT
//var StepTime   = 600	 
    
//VIRTUAL ROBOT
 var StepTime   = 360L	  
#]
	State s0 initial {	 
		println("&&&  boundarywalker ACTIVE ...") 
		[# kotlinCode.pathexecutil.register(myself) #]
   	}
   	Transition t0 whenMsg start -> work

  	State work{  		 
   		[# NumStep = 0   #] 
    	run itunibo.planner.plannerUtil.initAI()
  	}
    Goto detectBoundary  
     
    State detectBoundary{     
    	[# NumStep++ #]
    	println("boundarywalker detectBoundary $NumStep")
    	run itunibo.planner.plannerUtil.showCurrentRobotState()
    	updateResource [# "detectBoundary step=$NumStep" #]
     } 
    Goto doAheadMove if [# (NumStep<5) #] else boundaryFound
 
 	State doAheadMove{ 
   		[# kotlinCode.pathexecutil.doMove("p",myself) #]
	} 
	Transition t0   whenMsg moveok   -> stepDone   
					whenMsg pathfail -> stepFailed 
	 
 	State stepDone{  
 		updateResource [# itunibo.planner.plannerUtil.getMap() #]
 		run itunibo.planner.plannerUtil.updateMap(  "w" )
  	}
	Goto doAheadMove

	
	State stepFailed{  //has found an obstacle (a wall)
 		println("boundarywalker | FOUND A WALL")
 		//[# kotlinCode.pathexecutil.waitUser("onwall_$NumStep") #] 
 	 		if [# ! itunibo.planner.plannerUtil.atHome() #]{
	 			run itunibo.planner.plannerUtil.wallFound() 
		 		updateResource [# "found a wall" #]
		 		[# kotlinCode.pathexecutil.doMove("l",myself) #]
				run itunibo.planner.plannerUtil.updateMap(  "l" )
				run itunibo.planner.plannerUtil.showCurrentRobotState()
  	 		}else{
  	 			[# kotlinCode.pathexecutil.doMove("l",myself) #]
  	 			run itunibo.planner.plannerUtil.updateMap(  "l" )
  	 		}		 	      
 	}   
    Transition t0 whenMsg moveok -> detectBoundary  
 
 	State boundaryFound{
		run itunibo.planner.plannerUtil.saveRoomMap(mapname)
		println("robotmapper | FINAL MAP")   
 		run itunibo.planner.plannerUtil.showCurrentRobotState()	
 		updateResource [#  itunibo.planner.plannerUtil.getMap() #]
   		[# println(itunibo.planner.plannerUtil.showMap()) #]
   		
   		forward testexec -m mapDone : mapDone(mapname)
  	}
     
    
    
  	      
}	     
     
     
/*
 *  main
*/  
QActor testexec context ctxPathexecutor{
	[# val doboundary = true #]
	State s0 initial{  
	}
	Goto boundarywalk if [# doboundary #] else explorewalk
	
	State boundarywalk{
		forward boundarywalker -m start : start(  any   )
	}
	Transition t0 whenMsg mapDone -> reachAPoint
	
	State explorewalk{
		[# val PathTodo = "{\"path\":\"wwlw\" , \"owner\":\"spiralwalker\"}" #]
		//The RESULT of path execution should be sent to the owner
		println("doexplore starts")   
		forward spiralwalker -m start : start(  any   )
		//delay  1000
		//emit alarm : alarm(fire) 		
	}
	Transition t0 whenMsg mapDone -> reachAPoint
	
	State reachAPoint{
		[# kotlinCode.pathexecutil.waitUser("reachAPoint")  
		   val PathTodo = kotlinCode.walkerutil.doPlan("2","1" ) #]
		forward pathexec -m dopath : dopath(  $PathTodo   ) 		
	}
 	Transition t0 whenMsg pathdone -> reachAPointDone
 	    		  whenMsg pathfail -> reachAPointFailure
		  
    State reachAPointDone{
    	 [# println(itunibo.planner.plannerUtil.showMap()) #]
    }
    State reachAPointFailure{
    	[# println(itunibo.planner.plannerUtil.showMap()) #]
    	println("WARNING: point or path not free")
    }
    
}
