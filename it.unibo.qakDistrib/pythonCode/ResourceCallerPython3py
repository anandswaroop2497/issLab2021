##############################################################
# ResourceCallerPython3
# works also if the resourcealone has MQTT set 
##############################################################
import socket
import time

port = 8048
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

msgresourcealone   = "msg(cmd,request,python,resource,cmd(python),5)"
msgresourcecommon  = "msg(cmd,request,python,resourceandco,cmd(python),10)"
### alarm = "msg(alarm,event,python,none,alarm(fire),3)"

def connect(port) :
    server_address = ('localhost', port)
    sock.connect(server_address)    
    print("CONNECTED " , server_address)

def forward( message ) :
    print("forward ", message)
    msg = message + "\n"
    byt=msg.encode()    #required in Python3
    sock.send(byt)

def request( message ) :
    print("request ", message)
    msg = message + "\n"
    byt=msg.encode()    #required in Python3
    sock.send(byt)
    handleAnswer()

def handleAnswer() :
    print("handleAnswer " )
    while True:  ##client wants to maintain the connection
        reply = ''
        while True:
            answer = sock.recv(50)
            ## print("answer len=", len(answer))
            if len(answer) <= 0 :
                break
            reply += answer.decode("utf-8")
            ## print("reply=", reply)
            if reply.endswith("\n") :
                break
        print("final reply=", reply)
        break

        

def emit( event ) :
    print("emit ", event)
    msg = event + "\n"
    byt=msg.encode()    #required in Python3
    sock.send(byt)

def work() :
    request( msgresourcealone ) 
    ## time.sleep(1)
    ## emit( alarm )
    ## forward( msg2 ) 


def terminate() :
    sock.close()
    print("BYE")

###########################################    
connect(port)
work()
##terminate()  
