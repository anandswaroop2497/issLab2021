/*
 * A resource is called by two actors that send a request cmd:cmd(X)
 * The resource elaborates the request 
 * 	by updating its internal CoAP-observable info  
 * 	and sends the answer replytocmd to the sender of the request 
 * 
 * NOTE that IF WE USE MQTT, the callers subsystem starts also 
 * when the resource is not active 
 * OTHERWISE, the callers subsystem does not start until the ctxresource
 * is activated.
 *
 */ 
System /*-trace*/ -msglog  callersealone
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io 
	//"tcp://broker.hivemq.com" 
 
mqttBroker "broker.hivemq.com" : 1883 eventTopic "resource/input"  
 
Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)
Event   alarm       : alarm(X) 
  
Context ctxcallers  ip [ host= "localhost" port= 8049 ]  
Context ctxresource ip [ host= "127.0.0.1" port= 8048 ]   
ExternalQActor resource context ctxresource

 /*
 * caller1
 */
QActor caller1 context ctxcallers {
	State s0 initial {    
  		 println("caller1 request cmd ")
		 request resource -m cmd : cmd(caller1) 
	}
	Transition t0 
		whenReply replytocmd -> handleReply 
  	
	State handleReply{
		printCurrentMessage
   	}

  
}

/*
 * caller2
 */
QActor caller2 context ctxcallers {
	State s0 initial {    
  		 println("caller2 request cmd ")
		 request resource -m cmd : cmd(caller2) 
	}
	Goto waitForInput
	
	State waitForInput{
		println("caller2 waiting ... ")
	}
	Transition t0 
		whenEvent alarm      -> handleAlarm
		whenReply replytocmd -> handleReply 
	 
	State handleReply{
		printCurrentMessage
 	} 
 	Goto waitForInput
 	
	State handleAlarm{
		println("---------------------------------------------------")
		printCurrentMessage
 		println("---------------------------------------------------")
 	} 	
 	Goto waitForInput
 }