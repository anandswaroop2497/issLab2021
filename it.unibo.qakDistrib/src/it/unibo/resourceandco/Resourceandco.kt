/* Generated by AN DISI Unibo */ 
package it.unibo.resourceandco

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Resourceandco ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		  
			fun resourceInfo() : String {
		 		return "$name | state=${currentState.stateName}  msg=$currentMsg"
		 	}
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						updateResourceRep( resourceInfo()  
						)
						println("resource waiting ...")
					}
					 transition(edgeName="t00",targetState="handleRequestCmd",cond=whenRequest("cmd"))
				}	 
				state("handleRequestCmd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( resourceInfo()  
						)
						if( checkMsgContent( Term.createTerm("cmd(X)"), Term.createTerm("cmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val ANSW = "answerFor_${payloadArg(0)}"  
								emit("alarm", "alarm(fire)" ) 
								answer("cmd", "replytocmd", "replytocmd($ANSW)"   )  
						}
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
