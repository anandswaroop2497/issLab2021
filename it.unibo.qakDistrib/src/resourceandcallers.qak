/*
 * A resource is called by two actors that send a request cmd:cmd(X)
 * The resource elaborates the request 
 * 	by updating its internal CoAP-observable info  
 * 	and sends the answer replytocmd to the sender of the request 

 */
System -msglog  resourceandcallers
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 
 
//mqttBroker "broker.hivemq.com" : 1883   
 
Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)
Event   alarm       : alarm(X)
  
Context ctxresourceandco  ip [ host= "localhost" port= 8048 ]  
 
QActor resourceandco context ctxresourceandco { 
[#  
	fun resourceInfo() : String {
 		return "$name | state=${currentState.stateName}  msg=$currentMsg"
 	}
#]
	State s0 initial { 
		 //[# CoapObserver.activate() #]
		 updateResource [# resourceInfo() #]
		 println("resource waiting ...") 	  	 
	}
	Transition t0  
		whenRequest cmd -> handleRequestCmd
	
	State handleRequestCmd{
		printCurrentMessage
		updateResource [# resourceInfo() #]
		onMsg( cmd : cmd(X) ){
			[# val ANSW = "answerFor_${payloadArg(0)}" #]
			emit alarm : alarm(fire)		//to see what happens in the system ...
			replyTo cmd with replytocmd : replytocmd( $ANSW ) 
		}		 		
	}
	Goto s0	
	 
 }
/*
 * callerco1
 */
QActor callerco1 context ctxresourceandco {
	State s0 initial {    
  		 println("caller1 request cmd ")
		 request resourceandco -m cmd : cmd(callerco1) 
	}
	Transition t0 
		whenReply replytocmd -> handleReply 
  	
	State handleReply{
		printCurrentMessage
   	}

  
}

/*
 * callerco2
 */
QActor callerco2 context ctxresourceandco {
	State s0 initial {    
  		 println("caller2 request cmd ")
		 request resourceandco -m cmd : cmd(callerco2) 
	}
	Goto waitAnswer
	
	State waitAnswer{
		//println("caller2 waiting ... ")
	}
	Transition t0 
		whenEvent alarm      -> handleAlarm
		whenReply replytocmd -> handleReply 
	 
	State handleReply{
		printCurrentMessage
 	}
 	
	State handleAlarm{
		println("---------------------------------------------------")
		printCurrentMessage
 		println("---------------------------------------------------")
 	} 	
 	Goto waitAnswer
 }