/*
 * A resource is called by two actors that send a request cmd:cmd(X)
 * The resource elaborates the request 
 * 	by updating its internal CoAP-observable info  
 * 	and sends the answer replytocmd to the sender of the request 

 */
System -msglog  resourcealone
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 
 
//mqttBroker "broker.hivemq.com" : 1883   
 
Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)
Event   alarm       : alarm(X)
   
Context ctxresource  ip [ host= "localhost" port= 8048 ]  
 
QActor resource context ctxresource { 
[#  
	fun resourceInfo() : String {
 		return "$name | state=${currentState.stateName}  msg=$currentMsg"
 	}
#]
	State s0 initial { 
		 //[# CoapObserver.activate() #]
		 updateResource [# resourceInfo() #]
		 println("resource waiting ...") 	  	 
	}
	Transition t0  
		whenRequest cmd -> handleRequestCmd
	
	State handleRequestCmd{
		printCurrentMessage
		updateResource [# resourceInfo() #]
		onMsg( cmd : cmd(X) ){
			emit alarm : alarm(fire)		//to see what happens in the system ...
			[# val ANSW = "answerFor_${payloadArg(0)}" #]
			replyTo cmd with replytocmd : replytocmd( $ANSW ) 
		}		 		
	}
	Goto s0	
	 
 }