/*
 * This model gives essential and relevant information about
 * 	     STRUCTURE, INTERACTION and BEHAVIOR
 * about the ButtonLed system
 * 
 * The model is EXECUTABLE
 */

System bls   
 
Event    local_buttonCmd : local_buttonCmd(X)  
Dispatch ledCmd : ledCmd(X)  
  
Context ctxBls ip [host="localhost" port=8075] 		 
 
QActor button context ctxBls {	//generates local_buttonCmd 
	State s0 initial { 
		//run resources.bls.better.buttonEventEmitter.create( )    
		emit local_buttonCmd : local_buttonCmd( click ) 
		delay 1000
		emit local_buttonCmd : local_buttonCmd( click ) 
	}    
}   
  
QActor blscontrol context ctxBls {
	State s0 initial { 	}
	Transition t0 
		whenEvent local_buttonCmd -> turnOn 
	
	State turnOn{ 
		forward led -m ledCmd : ledCmd(on)
	}
	Transition t1 //whenTime 200 -> turnOff
				  whenEvent local_buttonCmd -> turnOff
	
	State turnOff{ 
		forward led -m ledCmd : ledCmd(off)
	}
	Transition t1 //whenTime 200 -> turnOn
		          whenEvent local_buttonCmd -> s0
}	
 
QActor led context ctxBls {  
//["var counter = 0"]    
	State s0 initial {  
		//run resources.myLedSegm.create( )
		println("led started")
	} 
	Goto waitCmd   
	
	State waitCmd{  println("led waits ...") 
	}   
	Transition t0     
	    //whenTime 5000 -> tooLate  
		//whenMsg ledCmd and "counter++ < 5 || counter > 8" -> handleLedCmd
		whenMsg ledCmd -> handleLedCmd
 	  
	State  handleLedCmd{  
		//printCurrentMessage   
		onMsg ( ledCmd : ledCmd(X) ) { println( "led handleLedCmd: ${payloadArg(0)} counter=$counter" ) }
		//onMsg ( ledCmd : ledCmd(on) ) { run resources.myLedSegm.turnOn( )	}
		//onMsg ( ledCmd : ledCmd(off) ){ run resources.myLedSegm.turnOff( )	}
	}	
	Goto waitCmd        
	
	//State tooLate{ println( "Be faster, please ... ")	} Goto waitCmd
}

 
 