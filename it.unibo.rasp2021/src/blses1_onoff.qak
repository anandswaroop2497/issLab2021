	/*
 * This model gives essential and relevant information about
 * 	     STRUCTURE, INTERACTION and BEHAVIOR
 * about the system
 * 
 * The model is EXECUTABLE
 */

System -msglog blses1_onoff 
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 
//mqttBroker "broker.hivemq.com" :  1883  

Event    local_buttonCmd : local_buttonCmd(X)  
Event    end : end(X)  

Dispatch ledCmd : ledCmd(X)   
  
Context ctxblses1  ip [host="localhost" port=8075] 		 
/*
 * Turn the led on/off maxCounte-times and afterwards
 * executed the 
 */    
QActor blsonoff context ctxblses1 {
	[# 
		var odd         = true
		var toutCounter = 0
		val maxCounter  = 5
	#]
	State s0 initial { 	
		//qrun resources.bls.kotlin.buttonEventEmitter.create( myself, "clickOnOff")  
	}
	Goto work
	State work{
		//println("blsonoff work")
	}
	Transition t0  
		whenTime 1000             -> tout
		whenEvent local_buttonCmd -> switchLed
		whenEvent end             -> endOfWork
		 
 	State switchLed{ 
 		//println("blsonoff switchLed")
 		if[# odd #]{
			updateResource [# "ledCmdOn" #]
			forward led -m ledCmd : ledCmd(on)
  		}else{
			updateResource [# "ledCmdOff" #]
			forward led -m ledCmd : ledCmd(off)  			
  		}
		[# odd = !odd #]
 	}
 	Goto work

	State tout{ 
		//println( "blsonoff: Are you still there ... ? $toutCounter ")
		[# toutCounter++ #]
		emit local_buttonCmd : local_buttonCmd(0)
	} 
	//Goto work if [# toutCounter<4 #] else endOfWork
	Goto switchLed if [# toutCounter < maxCounter #] else endOfWork

	State endOfWork{
		println("blsonoff BYE")
		terminate 0
 	}

}	

/*
 * Executes the command (dispatch) ledCmd : ledCmd(X) X=on/off
 * with reference to a led on pin BCM25 (wpi6) GND pyhsicalPIN-20
 */ 
QActor led context ctxblses1 {  
[# 
	var counter = 0 
	//val leddev = resources.bls.kotlin.led.create()	
#]    
	State s0 initial {  
		//run resources.it.unibo.bls.devices.gui.LedAsGui.create( )
 		println("led started")
 		updateResource [# "led OFF "#]
	} 
	Goto waitCmd   
	 
	State waitCmd{  
		//println("led waits ...") 
	}   
	Transition t0     
 		whenMsg ledCmd            -> handleLedCmd
  	  
	State  handleLedCmd{  
		printCurrentMessage   
		
		onMsg ( ledCmd : ledCmd(X) ) { 
			[# val Cmd = payloadArg(0)
			   counter++
			#]
			if[# Cmd == "on" #] {  
 				println( "led ON counter=$counter" )
				machineExec "\"sudo bash led25GpioTurnOn.sh\""
 				updateResource [# "ledOn ${counter}" #]
			}else{
				println( "led OFF counter=$counter" )
				machineExec "\"sudo bash led25GpioTurnOff.sh\""
				updateResource [# "ledOff ${counter}" #]
			}
		}
	}	
	Goto waitCmd        
}
 
 