/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val simulate = true
		   lateinit var firstActorInPipe : ActorBasic 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
						  if( simulate ) firstActorInPipe = sysUtil.getActor("sonarsimulator")!!  //generates simulated data
									else firstActorInPipe           = sysUtil.getActor("sonardatasource")!!  //generates REAL data
						 			firstActorInPipe.
										subscribeLocalActor("datacleaner"). 		//removes 'wrong' data''
										//subscribeLocalActor("datalogger").		    //logs (shows) the data generated by the sonar
						  				//subscribeLocalActor("sonar").				//handles sonarrobot but does not propagate ...
						 				//subscribeLocalActor("distancefilter").		//propagates the lcoal stream event obstacle
						  				subscribeLocalActor("sonar")  
						if(  simulate  
						 ){forward("simulatorstart", "simulatorstart(qasource)" ,"sonarsimulator" ) 
						}
						else
						 {forward("simulatorstart", "simulatorstart(qasource)" ,"sonardatasource" ) 
						 }
						println("sonar started")
					}
				}	 
				state("handleEvent") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t00",targetState="handleEvent",cond=whenEvent("sonarrobot"))
				}	 
			}
		}
}
