/*
-----------------------------------------------------------------------
  
-----------------------------------------------------------------------
 
 */
System -trace -msglog  resourcealone
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 
 
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "resource/input"
 
Request cmd 		: cmd(X) // X =  w | s | a | d | h
Reply   replytocmd  : replytocmd(X)
Event   alarm       : alarm(X)
   
Context ctxresource  ip [ host= "127.0.0.1" port= 8048 ]  
 
  
QActor resource context ctxresource { 
[#   
	fun resourceInfo() : String {
 		return "$name | state=${currentState.stateName}  msg=$currentMsg"
 	}
 	var evCount  = 1 
 	fun getEventName() : String{ return ""+evCount++   }
#]
	State s0 initial { 
		 //[# CoapObserver.activate() #]
		 updateResource [# resourceInfo() #]
		 println("resource waiting ...") 	  	 
	}
	Transition t0  
		whenEvent   alarm -> handleAlarm		//with MQTT the resource perceives its own alarms ...
		whenRequest cmd   -> handleRequestCmd
		
	State handleAlarm {
		println("---------------------------------------------------")
		printCurrentMessage
		println("---------------------------------------------------")
	}
	Goto s0
	State handleRequestCmd{ 
		printCurrentMessage
		updateResource [# resourceInfo() #]
			//Emit an event to see what happens in the system ...
			[# var EvBody = "alarm(${getEventName()})"  #]
			emit alarm : $EvBody		
		//NOTE that we emit the event BEFORE sending the answer => 
		//when the sender is caller2, then caller2 will perceive the event
		onMsg( cmd : cmd(X) ){
			[# val ANSW = "answerFor_${payloadArg(0)}" #]
			delay 1000 //to check alarm handling in caller2
			replyTo cmd with replytocmd : replytocmd( $ANSW ) 
		}		 		
	}
	Goto s0	
	 
 }