/*
 * ----------------------------------------------------------------------
 * Activates the CodedQActor sonardatasource of class resources.rasp.sonar.sonarHCSR04Support2021
 * Shows events
 * ----------------------------------------------------------------------
 */

 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 

System -msglog  sonarnaive  
mqttBroker "broker.hivemq.com" :  1883 eventTopic "unibo/nat/sonar/events"

Dispatch sonarstart      : sonarstart(V)  
Dispatch simulatorstart  : simulator(V)  
Event    sonarrobot      : sonar( V )   //emitted by rx.sonarSimulator or sensors.sonarHCSR04SupportActor	

Context ctxsonar         ip [host="localhost"     port=8068   ] 	 	
Context ctxsonarresource ip [host= "192.168.1.132" port= 8028 ]

//DATA SOURCES
CodedQActor sonarsimulator  context ctxsonar className "sonarSimulator"  
CodedQActor sonardatasource context ctxsonar className "sonarHCSR04Support2021"

//Filters
//CodedQActor datalogger     context ctxsonar className "rx.dataLogger"
CodedQActor datacleaner    context ctxsonar className "dataCleaner"
//CodedQActor distancefilter context ctxsonar className "rx.distanceFilter"

 
QActor sonar context ctxsonar {     
[# val simulate = true
   lateinit var firstActorInPipe : ActorBasic 
#]
 	State s0 initial {  		 
 		discardMsg On		//
		//CREATE THE PIPE
		[#  if( simulate ) firstActorInPipe = sysUtil.getActor("sonarsimulator")!!  //generates simulated data
			else firstActorInPipe           = sysUtil.getActor("sonardatasource")!!  //generates REAL data
 			firstActorInPipe.
				subscribeLocalActor("datacleaner"). 		//removes 'wrong' data''
				//subscribeLocalActor("datalogger").		    //logs (shows) the data generated by the sonar
  				//subscribeLocalActor("sonar").				//handles sonarrobot but does not propagate ...
 				//subscribeLocalActor("distancefilter").		//propagates the lcoal stream event obstacle
  				subscribeLocalActor("sonar")  
		#]    
 		//ACTIVATE THE DATA SOURCE   
		if [# simulate #]{forward sonarsimulator -m simulatorstart : simulatorstart(qasource) }
 		else{ forward sonardatasource -m simulatorstart : simulatorstart(qasource) }
 
 		//forward sonardatasource -m sonarstart : sonarstart(ok)
  		println("sonar started")  
  	}  
  	  	//Transition t0  whenEvent sonarrobot -> handleEvent  
					  
 	
  	State handleEvent{
  		printCurrentMessage
  		//TODO: better to emit here or in sonardatasource??
  	}
   	Transition t0 whenEvent sonarrobot -> handleEvent
 }

