/*
 * This model gives essential and relevant information about
 * 	     STRUCTURE, INTERACTION and BEHAVIOR
 * about the system
 * 
 * The model is EXECUTABLE
 */

 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 

/*
 * Declares the messages and the events in explicit way
 */
System -msglog  sonar  
mqttBroker "broker.hivemq.com" :  1883 eventTopic "unibo/nat/sonar/events"

Dispatch simulatorstart     : simulator(V)  
Event    sonarRobot 		: sonar( V )   //emitted by rx.sonarSimulator or sensors.sonarHCSR04SupportActor	
Event    obstacle           : obstacle(V)

Context ctxsonar ip [host="localhost" port=8068] 	 	 

//DATA SOURCES
CodedQActor sonarsimulator  context ctxsonar className "rx.sonarSimulator"  
CodedQActor sonardatasource context ctxsonar className "sensors.sonarHCSR04SupportActor"
//Filters
CodedQActor datalogger     context ctxsonar className "rx.dataLogger"
CodedQActor datacleaner    context ctxsonar className "rx.dataCleaner"
CodedQActor distancefilter context ctxsonar className "rx.distanceFilter"


QActor sonar context ctxsonar {     
[# val simulate = false
   lateinit var firstActorInPipe : ActorBasic 
#]
 	State s0 initial {  		 
 		discardMsg On	
 		  	  
  		println("sonar started")  
		//CREATE THE PIPE
		[#  if( simulate ) firstActorInPipe = sysUtil.getActor("sonarsimulator")!!  //generates simulated data
			else firstActorInPipe = sysUtil.getActor("sonardatasource")!! 			//generates REAL data
 			firstActorInPipe.
			subscribeLocalActor("datacleaner"). 		//removes 'wrong' data''
			subscribeLocalActor("datalogger").		    //logs (shows) the data generated by the sonar
  			//subscribeLocalActor("sonar").				//handles sonarRobot but does not propagate ...
 			subscribeLocalActor("distancefilter").		//propagates the lcoal stream event obstacle
  			subscribeLocalActor("sonar")  
		#]    
		//ACTIVATE THE DATA SOURCE   
		if [# simulate #]{forward sonarsimulator -m simulatorstart : simulatorstart(qasource) }
 		else{ forward sonardatasource -m simulatorstart : simulatorstart(qasource) }
  	}  
  	  	Transition t0 whenEvent obstacle   -> handleObstacle
//  	  			  whenEvent sonarRobot -> handleEvent  
					  
/*
 * If no Transition is specified, the event obstacle is received, but discarded. See the msglog
 */  
   	State handleObstacle{ 
  		printCurrentMessage
//  		[# emit( currentMsg ) #]
  	}
   	Transition t0  whenEvent obstacle  -> handleObstacle
   				   whenEvent sonarRobot -> handleEvent
 	
  	State handleEvent{
  		printCurrentMessage
  	}
   	Transition t0 whenEvent sonarRobot -> handleEvent
   				  whenEvent obstacle  -> handleEvent
 }

