/*
 * sonarResource.qak
 * A CoAP-observable component
 */
 
System  sonarresource
mqttBroker "broker.hivemq.com" : 1883  eventTopic "unibo/sonarresource"

Dispatch putval     : val(V)
Event    alarm      : alarm(X)
Event    sonarRobot : sonar( V )

Context ctxsonarresource ip [ host= "localhost"   port= 8028 ]

QActor sonarresource context ctxsonarresource{ 
	State s0 initial{ 
		//println("sonarresource start") 
	}
	Goto work
	
	State work{
		println("sonarresource waits ... ") 
	}
	Transition t0 whenMsg putval       -> handleValue
	              whenEvent sonarRobot -> handleSonarData
	              
	State handleSonarData{
		onMsg( sonarRobot : sonar(V) ){
			[# val distance = payloadArg(0) #]
			updateResource [# "$distance" #]  
 			println("distance=$distance")
		}	 	
	}
	
	State handleValue{
		onMsg( putval : val(V) ){
			[# val distance = payloadArg(0) #]
			updateResource [# "$distance" #]  
			emit alarm : alarm(fire)
			println("distance=$distance")
		}
	}
	Goto work
}

/*
 * rapid test
*/
/*
QActor sendermock context ctxsonarresource{
	State s0 initial{ 
		println("sendermock start") 
		forward sonarresource -m putval : val(10)
	}
	
} 
*/