.. _WebSocket: https://it.wikipedia.org/wiki/WebSocket
 

.. _`WebSockets`:

======================================
Web sockets
======================================

.. code:: java

    anaconda
    sphinx-quickstart

WebSocket_ è un protocollo che consente a due o più computer di comunicare tra loro 
contemporaneamente (full-duplex) su una singola connessione TCP.
È uno strato molto sottile su TCP che trasforma un flusso di byte in un flusso di messaggi 
(testo o binario).

Nella sua forma più semplice, un WebSocket è solo un canale di comunicazione tra due applicazioni
e non deve essere necessariamente coinvolto un browser.

A differenza di HTTP, che è un protocollo a livello di applicazione, nel protocollo WebSocket 
semplicemente non ci sono abbastanza informazioni in un messaggio in arrivo affinché 
un framework o un container sappia come instradarlo o elaborarlo.

Per questo motivo il WebSocket RFC definisce l'uso di sottoprotocolli. 
Durante l'handshake, il client e il server possono utilizzare l'intestazione 
*Sec-WebSocket-Protocol* per concordare un sottoprotocollo, ovvero un protocollo 
a livello di applicazione superiore da utilizzare. 
L'uso di un sottoprotocollo non è richiesto, ma anche se non utilizzato, le applicazioni 
dovranno comunque scegliere un formato di messaggio che sia il client che il server 
possano comprendere. 


Tuttavia l'uso più comune di WebSocket è facilitare la comunicazione tra un un'applicazione
server e un'applicazione basata su browser.
Infatti, rispetto a HTTP RESTful ha il vantaggio di realizzare comunicazioni  a 
bidirezionali e in tempo reale. Ciò consente al server di inviare informazione al client 
in qualsiasi momento, anziché costringere il client al polling.

I WebSocket utilizzano le Socket nella loro implementazione basata su un protocollo standard
che definisce un *handshake* di connessione e un *frame* di messaggio.

------------------------------------------------------
WebSocket in SpringBoot: versione base
------------------------------------------------------

Come primo semplice esempio di uso di WebSocket in Spring, creiamo una applicazione che consente
a un client di utilizzare un browser per inviare un messaggio o una immagine a un server 
che provvede a visualizzare il messaggio o l'immagine presso tutti i client collegati.

.. code:: java

    https://start.spring.io/
    Gradle, Java 2.6.2 Jar Java11


-  ``WebSocketConfiguration`` implementa ``WebSocketConfigurer`` e definisce metodi di callback
   per configurare WebSocket request handling via ``@EnableWebSocket`` annotation. Nel nostro caso
   aggiunge WebSocketHandler per il path **/socket**:      


:download:`WebSocketHandler.java <../../../src/main/java/it/unibo/wsdemoNoSTOMP/WebSocketHandler.java>`

   .. code:: java 

    @Configuration
    @EnableWebSocket
    public class WebSocketConfiguration implements WebSocketConfigurer {
    @Bean
    public ServletServerContainerFactoryBean createWebSocketContainer() {
        ServletServerContainerFactoryBean container = new ServletServerContainerFactoryBean();
        container.setMaxBinaryMessageBufferSize(1024000);
        return container;
    }

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(new WebSocketHandler(), "/socket").setAllowedOrigins("*");
    }
    }

-  ``WebSocketHandler`` definisce l'handler custom come specializzazione della classe astratta
   ``AbstractWebSocketHandler`` o delle sue sottoclassi ``TextWebSocketHandler`` o ``BinaryWebSocketHandler``    

    .. code:: java

       public class WebSocketHandler extends AbstractWebSocketHandler {
            ...
        @Override
        protected void handleTextMessage(WebSocketSession session, TextMessage message) throws IOException {
            System.out.println("New Text Message Received");
            session.sendMessage(message);
        }
        @Override
        protected void handleBinaryMessage(WebSocketSession session, BinaryMessage message) throws IOException {
            System.out.println("New Binary Message Received");
            session.sendMessage(message);
        }
       }

------------------------------------------------------
WebSocket in SpringBoot: versione STOMP
------------------------------------------------------

STOMP  è  un semplice protocollo di messaggistica originariamente creato per l'uso 
in linguaggi di scripting con frame ispirati a HTTP. 
STOMP è ampiamente supportato e adatto per l'uso su WebSocket e sul web.

STOMP può essere utilizzato anche senza websocket, ad esempio tramite una connessione 
Telnet o un servizio di message broker.


https://www.baeldung.com/websockets-spring 


https://www.dariawan.com/tutorials/spring/build-chat-application-using-spring-boot-and-websocket/