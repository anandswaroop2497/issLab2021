.. contents:: Contenuti
   :depth: 3
.. role:: red
.. role:: blue 
.. role:: remark 


    
.. :download:`WebSocketHandler.java <../../../src/main/java/it/unibo/wsdemoNoSTOMP/WebSocketHandler.java>`

.. epigraph:: 

.. _tcpsupprt:

.. .. list-table::
   :width: 100%
   :widths: 70,30

   * - L'idea è che l'`enabler` dovrebbe svolgere rispetto all'oggetto embedded una funzione analoga alle tute  
       in stile 'IronMan', in modo da costruire un microservizio.
     -  .. image:: ./_static/img/Radar/TutaVolo.jpg 
           :width: 100%

``  ``

.. image:: ./_static/img/Radar/radarDisplay.png 
   :align: center
   :width: 20%
   
.. _My target:

`My target`_.

:ref:`SonarModel<SonarModel>`

===
---
+++
%%%
&&&



.. (e la  *Content Delivery Network* (:blue:`CDN`) pubblica jsdelivr_) 

JSR 356 or the Java API for WebSocket, specifies an API that Java developers can use
for integrating WebSockets withing their applications
– both on the server side as well as on the Java client side.

https://www.baeldung.com/java-websockets

@ServerEndpoint: If decorated with @ServerEndpoint, the container ensures availability of the class as a WebSocket server listening to a specific URI space
@ClientEndpoint: A class decorated with this annotation is treated as a WebSocket client
@OnOpen: A Java method with @OnOpen is invoked by the container when a new WebSocket connection is initiated
@OnMessage: A Java method, annotated with @OnMessage, receives the information from the WebSocket container when a message is sent to the endpoint
@OnError: A method with @OnError is invoked when there is a problem with the communication
@OnClose: Used to decorate a Java method that is called by the container when the WebSocket connection closes


The WebSocket specification supports two on-wire data formats – text and binary.
The API supports both these formats, adds capabilities to work with Java objects
and health check messages (ping-pong) as defined in the specification:

Text: Any textual data (java.lang.String, primitives or their equivalent wrapper classes)
Binary: Binary data (e.g. audio, image etc.) represented by a java.nio.ByteBuffer or a byte[] (byte array)
Java objects: The API makes it possible to work with native (Java object) representations in your code and use custom
transformers (encoders/decoders) to convert them into compatible on-wire formats (text, binary) allowed by the
WebSocket protocol
Ping-Pong: A javax.websocket.PongMessage is an acknowledgment sent by a WebSocket peer in response to a health check
(ping) request
For our application, we'll be using Java Objects. We'll create the classes for encoding and decoding messages.


To run the application we built in the example, all we need to do is deploy the war file
in a web server and go to the URL: http://localhost:8080/java-websocket/.
You can find the link to the repository here.



.. code:: html

    <!-- indexAlsoImages.html -->
    <html>
    <head>
        <style>
            #messages {
                text-align: left;
                width: 50%;
                padding: 1em;
                border: 1px solid black;
            }
            #images {
                text-align: left;
                width: 50%;
                padding: 1em;
                border: 1px solid red;
            }
        </style>
        <title>WebSocket Client</title>
    </head>
    <body>
    <div class="container">
        <div id="messages"   class="messages"></div>
        <div id="images"     class="images"></div>

        <div class="input-fields">
            <p>Type a message and hit send:</p>
            <input id="message"/><button id="send">Send</button>

            <p>Select an image and hit send:</p>
            <input type="file" id="file" accept="image/*"/>
            <button id="sendImage">Send Image</button>
        </div>
    </div>
    </body>
    <script src="wsalsoimages.js"></script>
    </html>

    ----------------
OLD
----------------


https://spring.io/guides/gs/messaging-stomp-websocket/

- Possibile premessa https://www.baeldung.com/intro-to-project-lombok
- 
- 
  


- Create a Resource Representation Class. HelloMessage. Spring will use the Jackson JSON library to automatically marshal instances of type Greeting into JSON.
-  model the greeting representation, Greeting
- Create a Message-handling Controller. GreetingController
  
  .. code:: Java

  	@MessageMapping("/hello")    
      un msg inviato a /hello induce l'esecuzione del metodo con input un oggetto di tipo HelloMessage
      ricavato dal payload del emssaggio
    @SendTo("/topic/greetings")
      induce a inviare la risposta del metodo a tutti i sottoscrittori di /topic/greetings

- Configure Spring for STOMP messaging. WebSocketConfig
- 
  .. code:: Java

    @Configuration
    @EnableWebSocketMessageBroker
    public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {


- Create a Browser Client . index.html
- ./gradlew bootRun
- java -jar build/libs/gs-messaging-stomp-websocket-0.1.0.jar


https://www.baeldung.com/websockets-spring

https://www.dariawan.com/series/build-spring-websocket-application/

https://www.dariawan.com/tutorials/spring/spring-boot-websocket-basic-example/

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Esempio più articolato
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

https://www.dariawan.com/tutorials/spring/build-chat-application-using-spring-boot-and-websocket/
